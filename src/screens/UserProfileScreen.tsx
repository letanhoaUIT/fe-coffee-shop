import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Image,
  TouchableOpacity,
  TextInput,
  Alert, Share,
} from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import { useNavigation } from '@react-navigation/native';
import * as ImagePicker from 'expo-image-picker';
import AsyncStorage from '@react-native-async-storage/async-storage';

const UserProfileScreen = () => {
  const navigation = useNavigation();
  const [fullName, setFullName] = useState('Ebenezer Omosuli');
  const [phoneNumber, setPhoneNumber] = useState('0123456789');
  const [avatar, setAvatar] = useState(
    'https://uploads.commoninja.com/searchengine/wordpress/user-avatar-reloaded.png'
  );
  const handleShare = async () => {
    try {
      const result = await Share.share({
        message: `üåü Kh√°m ph√° ngay ·ª©ng d·ª•ng Coffee Shop tuy·ªát v·ªùi n√†y! \n\nT·∫≠n h∆∞·ªüng nh·ªØng m√≥n c√† ph√™ ngon nh·∫•t, t√¨m ki·∫øm c√°c lo·∫°i h·∫°t c√† ph√™ ch·∫•t l∆∞·ª£ng v√† d·ªÖ d√†ng ƒë·∫∑t h√†ng ngay tr√™n ƒëi·ªán tho·∫°i c·ªßa b·∫°n! üöÄ\n\nüì≤ T·∫£i ngay ·ª©ng d·ª•ng Coffee Shop ƒë·ªÉ tr·∫£i nghi·ªám:\n\n- Kh√°m ph√° menu c√† ph√™ ƒëa d·∫°ng ‚òï\n- T√¨m hi·ªÉu v·ªÅ c√°c lo·∫°i h·∫°t c√† ph√™ ƒë·ªôc ƒë√°o üå±\n- Th√™m m√≥n y√™u th√≠ch v√†o danh s√°ch y√™u th√≠ch ‚ù§Ô∏è\n- ƒê·∫∑t h√†ng v√† thanh to√°n nhanh ch√≥ng üí≥\n\nT·∫£i ·ª©ng d·ª•ng ngay v√† kh√°m ph√° th·∫ø gi·ªõi c√† ph√™ tuy·ªát v·ªùi!`,
        // url: 'https://coffeeshopapp.com',  // URL ho·∫∑c ƒë∆∞·ªùng link t·∫£i APK n·∫øu c√≥
        title: 'Coffee Shop App',
      });

      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // ƒê√£ chia s·∫ª v·ªõi m·ªôt ·ª©ng d·ª•ng c·ª• th·ªÉ
          console.log(`Shared with activity type: ${result.activityType}`);
        } else {
          // ƒê√£ chia s·∫ª nh∆∞ng kh√¥ng c√≥ ·ª©ng d·ª•ng c·ª• th·ªÉ
          console.log('Shared successfully');
        }
      } else if (result.action === Share.dismissedAction) {
        // ƒê√£ h·ªßy chia s·∫ª
        console.log('Share dismissed');
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to share content.');
      console.error(error);
    }
  };

  const handleEditProfile = () => {
    Alert.alert('Profile updated!', 'Your changes have been saved.');
  };

  const handleChangePassword = () => {
    navigation.navigate('ChangePassword'); // ƒêi·ªÅu h∆∞·ªõng sang m√†n h√¨nh ChangePassword
  };

const handleAvatarPress = async () => {
  const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();

  if (permissionResult.granted === false) {
    alert('Permission to access the gallery is required!');
    return;
  }

  const pickerResult = await ImagePicker.launchImageLibraryAsync({
    mediaTypes: ImagePicker.MediaTypeOptions.Images,
    allowsEditing: true,
    aspect: [1, 1],
    quality: 1,
  });

  if (!pickerResult.canceled) {
    setAvatar(pickerResult.assets[0].uri);
  }
};

  const handleLogout = async () => {
    try {
      // X√≥a token ho·∫∑c b·∫•t k·ª≥ th√¥ng tin ƒëƒÉng nh·∫≠p n√†o b·∫°n ƒë√£ l∆∞u
      await AsyncStorage.removeItem('userToken');

      // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn m√†n h√¨nh Login
      navigation.reset({
        index: 0,  // Ch·ªâ ƒë·ªãnh m√†n h√¨nh ƒë·∫ßu ti√™n trong stack
        routes: [{ name: 'Login' }],  // ƒêi·ªÅu h∆∞·ªõng t·ªõi m√†n h√¨nh 'Login'
      });
    } catch (error) {
      console.error('Error during logout:', error);  // X·ª≠ l√Ω l·ªói n·∫øu c√≥
    }
  };
  
  return (
    <View style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()}>
          <Icon name="arrow-left" size={24} color="#000" />
        </TouchableOpacity>
        <Text style={styles.title}>Profile</Text>
        <TouchableOpacity onPress={handleShare}>
          <Icon name="share-alt" size={24} color="#000" />
        </TouchableOpacity>
      </View>

      {/* User Information */}
      <View style={styles.profileContainer}>
        <TouchableOpacity onPress={handleAvatarPress}>
          <Image source={{ uri: avatar }} style={styles.avatar} />
        </TouchableOpacity>
        <TextInput
          style={styles.input}
          value={fullName}
          onChangeText={setFullName}
          placeholder="Full Name"
        />
        <TextInput
          style={styles.input}
          value={phoneNumber}
          onChangeText={setPhoneNumber}
          placeholder="Phone Number"
          keyboardType="phone-pad"
        />
        <TouchableOpacity style={styles.saveButton} onPress={handleEditProfile}>
          <Text style={styles.saveButtonText}>Save Changes</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.changePasswordButton}
          onPress={handleChangePassword}
        >
          <Text style={styles.changePasswordText}>Change Password</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.logoutButton}
          onPress={handleLogout} // ƒê√¢y l√† h√†m s·∫Ω x·ª≠ l√Ω ƒëƒÉng xu·∫•t
        >
          <Text style={styles.logoutText}>Logout</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    paddingHorizontal: 20,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 40,
  },
  title: {
    color: '0f4359',
    fontWeight: 'bold',
    fontSize: 28,
    textAlign: 'center',
  },
  profileContainer: {
    alignItems: 'center',
    marginTop: 40,
  },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 20,
  },
  input: {
    width: '100%',
    backgroundColor: '#FFFFFF',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: '#CCCCCC',
  },
  saveButton: {
    backgroundColor: '#0f4359',
    borderRadius: 5,
    paddingHorizontal: 20,
    paddingVertical: 10,
    marginTop: 10,
  },
  saveButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#FFFFFF',
  },
  changePasswordButton: {
    backgroundColor: '#E0E0E0',
    borderRadius: 5,
    paddingHorizontal: 20,
    paddingVertical: 10,
    marginTop: 20,
  },
  changePasswordText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  logoutButton: {
    backgroundColor: '#F44336', // M√†u ƒë·ªè cho n√∫t logout
    padding: 10,
    borderRadius: 5,
    marginTop: 20,
  },
  logoutText: {
    color: '#fff',
    fontSize: 16,
  },
});

export default UserProfileScreen;
